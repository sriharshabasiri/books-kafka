{
  "env1": {
    "db": {
      "host": "db-host",
      "port": 1521,
      "user": "admin",
      "password": "adminpass",
      "service_name": "ORCL"
    },
    "java_encryption_file": "/path/to/encryption.jar",
    "classpath": "/path/to/classpath",
    "jboss_servers": [
      {
        "name": "jboss-server-1",
        "user": "jbossuser",
        "host": "server1.example.com",
        "standalone_file": "/path/to/standalone.xml",
        "service": "jboss.service"
      },
      {
        "name": "jboss-server-2",
        "user": "jbossuser",
        "host": "server2.example.com",
        "standalone_file": "/path/to/standalone.xml",
        "service": "jboss.service"
      }
    ]
  }
}


import os
import random
import string
import subprocess
import json
import cx_Oracle
import shutil

# Load config (DB details, JBoss server details, regions, keys)
with open('config.json') as config_file:
    config = json.load(config_file)

# Load passwords JSON (which holds old and new encrypted passwords)
with open('passwords.json') as passwords_file:
    passwords = json.load(passwords_file)

# Step 1: Random password generator
def generate_password(length=10):
    chars = string.ascii_letters + string.digits + "_"
    return ''.join(random.choice(chars) for _ in range(length))

# Step 2: Update Oracle DB with new passwords
def update_db_passwords(env, users):
    db_config = config[env]['db']
    conn = cx_Oracle.connect(db_config['user'], db_config['password'], f"{db_config['host']}:{db_config['port']}/{db_config['service_name']}")
    cursor = conn.cursor()
    
    for user, new_password in users.items():
        sql = f"ALTER USER {user} IDENTIFIED BY \"{new_password}\""
        cursor.execute(sql)
        print(f"Updated password for {user}")
    
    conn.commit()
    cursor.close()
    conn.close()

# Step 3: Call Java file to encrypt passwords
def encrypt_password(env, user, password):
    java_file_path = config[env]['java_encryption_file']
    classpath = config[env]['classpath']  # Get the classpath from the config

    # Set environment variables for the subprocess
    env_vars = os.environ.copy()
    env_vars['CLASSPATH'] = classpath

    # Command to call the Java encryption file
    cmd = ['java', '-jar', java_file_path, password]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, env=env_vars)
    
    encrypted_password = result.stdout.decode('utf-8').strip()
    return encrypted_password

# Step 4: Update standalone.xml for each JBoss server
def update_standalone_file(env, users):
    jboss_servers = config[env]['jboss_servers']
    
    for server in jboss_servers:
        for user, passwords in users.items():
            standalone_file_path = server['standalone_file']
            backup_file = f"{standalone_file_path}.bak"
            
            # Backup the standalone.xml file
            shutil.copyfile(standalone_file_path, backup_file)
            print(f"Backup created for {standalone_file_path}")
            
            # Read the standalone.xml file
            with open(standalone_file_path, 'r') as file:
                data = file.read()
            
            # Replace old encrypted password with the new one
            data = data.replace(passwords['old_encrypted'], passwords['new_encrypted'])
            
            # Write the updated data back to the standalone.xml file
            with open(standalone_file_path, 'w') as file:
                file.write(data)
            print(f"Updated standalone.xml for {user} on {server['name']}")

# Step 5: Restart JBoss services
def restart_jboss_service(env):
    jboss_servers = config[env]['jboss_servers']
    for server in jboss_servers:
        restart_cmd = f"ssh {server['user']}@{server['host']} 'sudo systemctl restart {server['service']}'"
        subprocess.run(restart_cmd, shell=True)
        print(f"Restarted JBoss service on {server['host']}")

# Step 6: Update the passwords.json file
def update_passwords_json(env, users):
    for user, passwords in users.items():
        passwords_json[env][user]['old_encrypted'] = passwords['new_encrypted']
    
    with open('passwords.json', 'w') as passwords_file:
        json.dump(passwords_json, passwords_file, indent=4)
    print("Updated passwords.json with new encrypted passwords.")

# Main process to automate the steps
def automate_password_update(env):
    # Step 1: Generate new passwords
    users = {user: generate_password() for user in passwords[env].keys()}
    
    # Step 2: Update passwords in Oracle DB
    update_db_passwords(env, users)
    
    # Step 3: Encrypt new passwords and store them
    encrypted_passwords = {}
    for user, new_password in users.items():
        encrypted_password = encrypt_password(env, user, new_password)
        encrypted_passwords[user] = {
            'old_encrypted': passwords[env][user]['old_encrypted'],
            'new_encrypted': encrypted_password
        }
    
    # Step 4: Update standalone.xml for each JBoss server
    update_standalone_file(env, encrypted_passwords)
    
    # Step 5: Restart JBoss services
    restart_jboss_service(env)
    
    # Step 6: Update passwords.json with new encrypted passwords
    update_passwords_json(env, encrypted_passwords)

# Input the environment to start the process
environment = input("Enter environment: ")
automate_password_update(environment)








 


