import os
import json
import random
import string
import subprocess
import cx_Oracle
from datetime import datetime
import shutil

# Load configuration from JSON files
with open('config.json') as config_file:
    config = json.load(config_file)

with open('passwords.json') as password_file:
    password_config = json.load(password_file)

# Function to generate random password
def generate_password(length=10):
    chars = string.ascii_letters + string.digits + "_"
    return ''.join(random.choice(chars) for _ in range(length))

# Connect to Oracle DB and alter user passwords
def alter_db_passwords(env_config, user_passwords):
    dsn = cx_Oracle.makedsn(env_config['db_details']['host'], env_config['db_details']['port'], sid=env_config['db_details']['sid'])
    connection = cx_Oracle.connect(env_config['db_details']['username'], env_config['db_details']['password'], dsn)
    cursor = connection.cursor()
    for user, new_password in user_passwords.items():
        alter_stmt = f"ALTER USER {user} IDENTIFIED BY \"{new_password}\""
        cursor.execute(alter_stmt)
        print(f"Password altered for user {user}")
    connection.commit()
    connection.close()

# Call encryption shell script
def encrypt_passwords(env_config, user_passwords):
    encrypted_passwords = {}
    for user, password in user_passwords.items():
        result = subprocess.run([env_config['encryption_script'], user, password], capture_output=True, text=True)
        encrypted_passwords[user] = result.stdout.strip()
        print(f"Encrypted password generated for user {user}")
    return encrypted_passwords

# Update standalone.xml files with new encrypted passwords
def update_standalone_files(env_config, encrypted_passwords, old_passwords):
    for xml_path in env_config['jboss_servers']:
        backup_path = f"{xml_path}.{datetime.now().strftime('%Y%m%d%H%M%S')}.bak"
        shutil.copyfile(xml_path, backup_path)
        print(f"Backup taken for {xml_path} at {backup_path}")
        
        with open(xml_path, 'r') as file:
            xml_data = file.read()
        
        for user, new_encrypted_password in encrypted_passwords.items():
            old_password = old_passwords[user]['old_encrypted_password']
            xml_data = xml_data.replace(old_password, new_encrypted_password)
        
        with open(xml_path, 'w') as file:
            file.write(xml_data)
        
        print(f"Updated {xml_path} with new encrypted passwords")

# Update the passwords.json file with new encrypted passwords
def update_passwords_json(env_name, encrypted_passwords):
    for user, new_encrypted_password in encrypted_passwords.items():
        password_config['environments'][env_name]['users'][user]['old_encrypted_password'] = password_config['environments'][env_name]['users'][user]['new_encrypted_password']
        password_config['environments'][env_name]['users'][user]['new_encrypted_password'] = new_encrypted_password
    
    # Write back to passwords.json
    with open('passwords.json', 'w') as password_file:
        json.dump(password_config, password_file, indent=4)
    print(f"passwords.json updated with new encrypted passwords for {env_name}")

# Restart JBoss services
def restart_services():
    subprocess.run(["systemctl", "restart", "jboss"], check=True)
    print("JBoss services restarted")

# Main function
def main():
    environment = input("Enter the environment (env1, env2, etc.): ").strip()
    
    if environment not in config['environments']:
        print("Invalid environment")
        return
    
    env_config = config['environments'][environment]
    
    # Step 1: Generate random passwords for users
    user_passwords = {user: generate_password() for user in password_config['environments'][environment]['users']}
    
    # Step 2: Connect to Oracle DB and alter passwords
    alter_db_passwords(env_config, user_passwords)
    
    # Step 3: Call shell script to encrypt passwords
    encrypted_passwords = encrypt_passwords(env_config, user_passwords)
    
    # Step 4: Update standalone.xml files
    update_standalone_files(env_config, encrypted_passwords, password_config['environments'][environment]['users'])
    
    # Step 5: Update passwords.json with the new encrypted passwords
    update_passwords_json(environment, encrypted_passwords)
    
    # Step 6: Restart JBoss services
    restart_services()

if __name__ == "__main__":
    main()








    {
    "environments": {
        "env1": {
            "users": {
                "user1": {
                    "old_encrypted_password": "old_encrypted_password1",
                    "new_encrypted_password": "new_encrypted_password1"
                },
                "user2": {
                    "old_encrypted_password": "old_encrypted_password2",
                    "new_encrypted_password": "new_encrypted_password2"
                },
                "user3": {
                    "old_encrypted_password": "old_encrypted_password3",
                    "new_encrypted_password": "new_encrypted_password3"
                },
                "user4": {
                    "old_encrypted_password": "old_encrypted_password4",
                    "new_encrypted_password": "new_encrypted_password4"
                },
                "user5": {
                    "old_encrypted_password": "old_encrypted_password5",
                    "new_encrypted_password": "new_encrypted_password5"
                },
                "user6": {
                    "old_encrypted_password": "old_encrypted_password6",
                    "new_encrypted_password": "new_encrypted_password6"
                }
            }
        }
    }
}



{
    "environments": {
        "env1": {
            "db_details": {
                "host": "db_host1",
                "port": 1521,
                "sid": "db_sid",
                "username": "admin",
                "password": "admin_password"
            },
            "jboss_servers": [
                "/path/to/region1/jboss1/standalone.xml",
                "/path/to/region1/jboss2/standalone.xml",
                "/path/to/region1/jboss3/standalone.xml"
            ],
            "encryption_script": "/path/to/encryption.sh"
        }
    }
}
