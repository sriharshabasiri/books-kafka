import os
import random
import string
import subprocess
import json
import shutil

# Load config (DB details, JBoss server details, regions, keys)
with open('config.json') as config_file:
    config = json.load(config_file)

# Load passwords JSON (which holds old and new encrypted passwords)
with open('passwords.json') as passwords_file:
    passwords_json = json.load(passwords_file)

# Step 1: Random password generator
def generate_password(length=10):
    chars = string.ascii_letters + string.digits + "_"
    return ''.join(random.choice(chars) for _ in range(length))

# Step 2: Update Oracle DB passwords remotely using sqlplus via SSH
def update_db_passwords_sqlplus(env, users):
    db_config = config[env]['db']
    remote_user = db_config['ssh_user']
    remote_host = db_config['host']
    db_user = db_config['user']
    db_pass = db_config['password']
    db_port = db_config['port']
    db_sid = db_config['service_name']

    for user, new_password in users.items():
        # Create the SQL command to alter the user password
        sql_command = f"ALTER USER {user} IDENTIFIED BY \"{new_password}\";\n"

        # Create a temporary SQL file on the remote server
        remote_sql_file = f"/tmp/alter_user_{user}.sql"
        create_sql_cmd = f"echo '{sql_command}' > {remote_sql_file}"
        
        # Execute the SQL script via sqlplus remotely using SSH
        sqlplus_command = f"sqlplus {db_user}/{db_pass}@'//{remote_host}:{db_port}/{db_sid}' @{remote_sql_file}"

        # SSH command to run on the remote server
        ssh_cmd = f"ssh {remote_user}@{remote_host} \"{create_sql_cmd}; {sqlplus_command}; rm -f {remote_sql_file}\""
        
        # Execute the SSH command
        result = subprocess.run(ssh_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        if result.returncode == 0:
            print(f"Password updated successfully for {user}")
        else:
            print(f"Error updating password for {user}: {result.stderr.decode('utf-8')}")

# Step 3: Call Java class to encrypt passwords
def encrypt_password(env, password):
    classpath = config[env]['classpath']  # Get the classpath from the config

    # Set environment variables for the subprocess
    env_vars = os.environ.copy()
    env_vars['CLASSPATH'] = classpath

    # Command to call the Java class for encryption
    cmd = ['java', 'org.picketbox.datasource.security.SecureIdentityLoginModule', password]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, env=env_vars)

    encrypted_password = result.stdout.decode('utf-8').strip()
    return encrypted_password

# Step 4: Update standalone.xml on the remote JBoss servers
def update_standalone_file(env, users):
    jboss_servers = config[env]['jboss_servers']
    
    for server in jboss_servers:
        remote_user = server['ssh_user']
        remote_host = server['host']
        for user, passwords in users.items():
            standalone_file_path = server['standalone_file']
            backup_file = f"{standalone_file_path}.bak"
            
            # SSH command to back up the standalone.xml file on the remote server
            ssh_backup_cmd = f"ssh {remote_user}@{remote_host} 'cp {standalone_file_path} {backup_file}'"
            subprocess.run(ssh_backup_cmd, shell=True)
            print(f"Backup created for {standalone_file_path} on {remote_host}")
            
            # Read the local version of the standalone.xml file
            with open(standalone_file_path, 'r') as file:
                data = file.read()
            
            # Replace old encrypted password with the new one
            data = data.replace(passwords_json[env][user]['old_encrypted'], passwords['new_encrypted'])
            
            # Write the updated data to a temporary file
            temp_file = f"/tmp/updated_standalone_{user}.xml"
            with open(temp_file, 'w') as file:
                file.write(data)
            
            # Copy the updated file to the remote server using scp
            scp_cmd = f"scp {temp_file} {remote_user}@{remote_host}:{standalone_file_path}"
            subprocess.run(scp_cmd, shell=True)
            print(f"Updated standalone.xml for {user} on {server['name']}")

            # Remove the local temporary file
            os.remove(temp_file)

# Step 5: Restart JBoss services on remote servers
def restart_jboss_service(env):
    jboss_servers = config[env]['jboss_servers']
    for server in jboss_servers:
        remote_user = server['ssh_user']
        remote_host = server['host']
        restart_cmd = f"ssh {remote_user}@{remote_host} 'sudo systemctl restart {server['service']}'"
        subprocess.run(restart_cmd, shell=True)
        print(f"Restarted JBoss service on {remote_host}")

# Step 6: Update the passwords.json file with new and old encrypted passwords and new unencrypted passwords
def update_passwords_json(env, users):
    for user, passwords in users.items():
        passwords_json[env][user]['old_encrypted'] = passwords['new_encrypted']
        passwords_json[env][user]['unencrypted'] = passwords['unencrypted']  # Save the unencrypted password as well
    
    with open('passwords.json', 'w') as passwords_file:
        json.dump(passwords_json, passwords_file, indent=4)
    print("Updated passwords.json with new encrypted and unencrypted passwords.")

# Main process to automate the steps
def automate_password_update(env):

    # Step 1: Generate new passwords
    users = {user: {'unencrypted': generate_password()} for user in passwords_json[env].keys()}
    print(f"Generated Users data: {users}")
    
    # Step 2: Update passwords in Oracle DB using sqlplus on remote server
    unencrypted_passwords = {user: passwords['unencrypted'] for user, passwords in users.items()}
    update_db_passwords_sqlplus(env, unencrypted_passwords)
    
    # Step 3: Encrypt new passwords and store them
    for user, passwords in users.items():
        encrypted_password = encrypt_password(env, passwords['unencrypted'])
        passwords['new_encrypted'] = encrypted_password
    
    # Step 4: Update standalone.xml for each JBoss server on remote servers
    update_standalone_file(env, users)
    
    # Step 5: Restart JBoss services on remote servers
    restart_jboss_service(env)
    
    # Step 6: Update passwords.json with new encrypted passwords and unencrypted passwords
    update_passwords_json(env, users)

# Input the environment to start the process
environment = input("Enter environment: ")
automate_password_update(environment)









 


