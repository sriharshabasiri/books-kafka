import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CertificateRenewalApp = () => {
  // Predefined data
  const regions = [
    { id: 'dev', name: 'Development' },
    { id: 'esqm', name: 'ESQM' },
    { id: 'perf', name: 'Performance' }
  ];

  const environments = {
    dev: [
      { id: 'dev1', name: 'Development 1' },
      { id: 'dev2', name: 'Development 2' }
    ],
    esqm: [
      { id: 'esqm1', name: 'ESQM 1' },
      { id: 'esqm2', name: 'ESQM 2' }
    ],
    perf: [
      { id: 'perf1', name: 'Performance 1' },
      { id: 'perf2', name: 'Performance 2' }
    ]
  };

  const servers = {
    dev1: [
      { id: 'dev1-jboss1', name: 'JBoss 1' },
      { id: 'dev1-jboss2', name: 'JBoss 2' },
      { id: 'dev1-core1', name: 'Core 1' }
    ],
    dev2: [
      { id: 'dev2-jboss1', name: 'JBoss 1' },
      { id: 'dev2-core1', name: 'Core 1' },
      { id: 'dev2-core2', name: 'Core 2' }
    ],
    esqm1: [
      { id: 'esqm1-jboss1', name: 'JBoss 1' },
      { id: 'esqm1-core1', name: 'Core 1' }
    ],
    esqm2: [
      { id: 'esqm2-jboss1', name: 'JBoss 1' },
      { id: 'esqm2-jboss2', name: 'JBoss 2' }
    ],
    perf1: [
      { id: 'perf1-jboss1', name: 'JBoss 1' },
      { id: 'perf1-core1', name: 'Core 1' },
      { id: 'perf1-core2', name: 'Core 2' }
    ],
    perf2: [
      { id: 'perf2-jboss1', name: 'JBoss 1' },
      { id: 'perf2-jboss2', name: 'JBoss 2' }
    ]
  };

  // Mock certificate data - in a real app, you might want to fetch this
  const mockCertificates = {
    'dev1-jboss1': [
      { id: 'cert1', alias: 'ssl-cert', issuer: 'CN=Test CA', subject: 'CN=dev1-jboss1', expiry_date: '2023-12-31', days_remaining: 45 },
      { id: 'cert2', alias: 'auth-cert', issuer: 'CN=Internal CA', subject: 'CN=auth-server', expiry_date: '2023-11-15', days_remaining: 20 }
    ],
    'dev1-jboss2': [
      { id: 'cert3', alias: 'ssl-cert', issuer: 'CN=Test CA', subject: 'CN=dev1-jboss2', expiry_date: '2024-01-15', days_remaining: 60 },
      { id: 'cert4', alias: 'ldap-cert', issuer: 'CN=Internal CA', subject: 'CN=ldap-server', expiry_date: '2023-10-30', days_remaining: 5 }
    ],
    // Add certificates for other servers as needed
  };

  // State management
  const [selectedRegion, setSelectedRegion] = useState('');
  const [selectedEnvironment, setSelectedEnvironment] = useState('');
  const [selectedServer, setSelectedServer] = useState('');
  const [certificates, setCertificates] = useState([]);
  const [selectedCertificate, setSelectedCertificate] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  // Get current environments based on selected region
  const getCurrentEnvironments = () => {
    return selectedRegion ? environments[selectedRegion] : [];
  };

  // Get current servers based on selected environment
  const getCurrentServers = () => {
    return selectedEnvironment ? servers[selectedEnvironment] : [];
  };

  // Get certificates when server is selected
  useEffect(() => {
    if (selectedServer) {
      // In a real app, you might want to fetch this from an API
      // For demo purposes, we're using mock data
      setCertificates(mockCertificates[selectedServer] || []);
    } else {
      setCertificates([]);
    }
    setSelectedCertificate(null);
  }, [selectedServer]);

  // Handle certificate renewal
  const handleRenewCertificate = async () => {
    if (!selectedCertificate) {
      setError('Please select a certificate to renew');
      return;
    }

    try {
      setIsLoading(true);
      setMessage('');
      setError('');
      
      // This is the only API call in this version
      const response = await axios.post('/api/renew-certificate/', {
        certificate_id: selectedCertificate.id,
        server: selectedServer,
        environment: selectedEnvironment,
        region: selectedRegion
      });

      setMessage(response.data.message || 'Certificate renewal process initiated successfully');
      
      // In a real app, you might want to refresh the certificate list here
      // by either fetching from API or updating the mock data
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to initiate certificate renewal');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Certificate Renewal Portal</h2>
      
      {error && <div className="alert alert-danger">{error}</div>}
      {message && <div className="alert alert-success">{message}</div>}
      
      <div className="card mb-4">
        <div className="card-body">
          <h5 className="card-title">Select Certificate to Renew</h5>
          
          {/* Region Selection */}
          <div className="mb-3">
            <label htmlFor="regionSelect" className="form-label">Region</label>
            <select 
              id="regionSelect" 
              className="form-select" 
              value={selectedRegion} 
              onChange={(e) => {
                setSelectedRegion(e.target.value);
                setSelectedEnvironment('');
                setSelectedServer('');
              }}
              disabled={isLoading}
            >
              <option value="">Select a region</option>
              {regions.map(region => (
                <option key={region.id} value={region.id}>{region.name}</option>
              ))}
            </select>
          </div>
          
          {/* Environment Selection */}
          <div className="mb-3">
            <label htmlFor="envSelect" className="form-label">Environment</label>
            <select 
              id="envSelect" 
              className="form-select" 
              value={selectedEnvironment} 
              onChange={(e) => {
                setSelectedEnvironment(e.target.value);
                setSelectedServer('');
              }}
              disabled={!selectedRegion || isLoading}
            >
              <option value="">Select an environment</option>
              {getCurrentEnvironments().map(env => (
                <option key={env.id} value={env.id}>{env.name}</option>
              ))}
            </select>
          </div>
          
          {/* Server Selection */}
          <div className="mb-3">
            <label htmlFor="serverSelect" className="form-label">Server</label>
            <select 
              id="serverSelect" 
              className="form-select" 
              value={selectedServer} 
              onChange={(e) => setSelectedServer(e.target.value)}
              disabled={!selectedEnvironment || isLoading}
            >
              <option value="">Select a server</option>
              {getCurrentServers().map(server => (
                <option key={server.id} value={server.id}>{server.name}</option>
              ))}
            </select>
          </div>
        </div>
      </div>
      
      {/* Certificates List */}
      {selectedServer && (
        <div className="card">
          <div className="card-body">
            <h5 className="card-title">Certificates on {getCurrentServers().find(s => s.id === selectedServer)?.name}</h5>
            
            {isLoading ? (
              <div className="text-center">
                <div className="spinner-border" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
              </div>
            ) : (
              <div className="table-responsive">
                <table className="table table-hover">
                  <thead>
                    <tr>
                      <th>Select</th>
                      <th>Alias</th>
                      <th>Issuer</th>
                      <th>Subject</th>
                      <th>Expiry Date</th>
                      <th>Days Remaining</th>
                    </tr>
                  </thead>
                  <tbody>
                    {certificates.length > 0 ? (
                      certificates.map(cert => (
                        <tr key={cert.id} className={cert.days_remaining < 30 ? 'table-warning' : ''}>
                          <td>
                            <input 
                              type="radio" 
                              name="certificate" 
                              checked={selectedCertificate?.id === cert.id}
                              onChange={() => setSelectedCertificate(cert)}
                            />
                          </td>
                          <td>{cert.alias}</td>
                          <td>{cert.issuer}</td>
                          <td>{cert.subject}</td>
                          <td>{cert.expiry_date}</td>
                          <td>
                            <span className={cert.days_remaining < 30 ? 'text-danger fw-bold' : ''}>
                              {cert.days_remaining}
                            </span>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan="6" className="text-center">No certificates found for this server</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            )}
            
            <div className="d-flex justify-content-end mt-3">
              <button 
                className="btn btn-primary" 
                onClick={handleRenewCertificate}
                disabled={!selectedCertificate || isLoading}
              >
                {isLoading ? (
                  <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                ) : (
                  'Renew Selected Certificate'
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CertificateRenewalApp;
