import React, { useState } from 'react';
import axios from 'axios';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const regionEnvironments = {
  dev: ['dev1', 'dev2'],
  esqm: ['esqm1', 'esqm2', 'esqm3'],
  perf: ['perf1', 'perf2']
};

const LogSearchForm = () => {
  const [selectedRegion, setSelectedRegion] = useState('');
  const [selectedEnvironment, setSelectedEnvironment] = useState('');
  const [uuid, setUuid] = useState('');
  const [selectedDate, setSelectedDate] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Calculate min/max dates for past week
  const maxDate = new Date();
  const minDate = new Date();
  minDate.setDate(maxDate.getDate() - 7);

  const handleRegionChange = (e) => {
    const region = e.target.value;
    setSelectedRegion(region);
    setSelectedEnvironment(''); // Reset environment when region changes
  };

  const handleUuidChange = (e) => {
    const value = e.target.value;
    if (value.length <= 64) { // Enforce 64 char limit
      setUuid(value);
    }
  };

  const formatDate = (date) => {
    if (!date) return '';
    const day = date.getDate().toString().padStart(2, '0');
    const month = date.toLocaleString('default', { month: 'short' });
    const year = date.getFullYear();
    return `${day}${month}${year}`; // DDMonYYYY format
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    // Validation
    if (!selectedRegion || !selectedEnvironment || !uuid || !selectedDate) {
      setError('Please fill all fields');
      return;
    }

    if (uuid.length !== 64) {
      setError('UUID must be exactly 64 characters');
      return;
    }

    const formattedDate = formatDate(selectedDate);

    try {
      setIsSubmitting(true);
      const response = await axios.post('/api/logsearch/', {
        environment: selectedEnvironment,
        uuid: uuid,
        date: formattedDate
      });

      setSuccess('Log search initiated successfully!');
      console.log('API Response:', response.data);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to initiate log search');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="log-search-container">
      <h2>Log Search</h2>
      
      <form onSubmit={handleSubmit}>
        {/* Region Dropdown */}
        <div className="form-group">
          <label htmlFor="region">Region:</label>
          <select
            id="region"
            value={selectedRegion}
            onChange={handleRegionChange}
            required
          >
            <option value="">Select a region</option>
            {Object.keys(regionEnvironments).map(region => (
              <option key={region} value={region}>{region.toUpperCase()}</option>
            ))}
          </select>
        </div>

        {/* Environment Dropdown */}
        {selectedRegion && (
          <div className="form-group">
            <label htmlFor="environment">Environment:</label>
            <select
              id="environment"
              value={selectedEnvironment}
              onChange={(e) => setSelectedEnvironment(e.target.value)}
              required
            >
              <option value="">Select environment</option>
              {regionEnvironments[selectedRegion].map(env => (
                <option key={env} value={env}>{env}</option>
              ))}
            </select>
          </div>
        )}

        {/* UUID Input */}
        <div className="form-group">
          <label htmlFor="uuid">UUID (64 characters):</label>
          <input
            type="text"
            id="uuid"
            value={uuid}
            onChange={handleUuidChange}
            maxLength={64}
            pattern="[a-fA-F0-9]{64}"
            title="64 character UUID"
            required
          />
          <small>Characters entered: {uuid.length}/64</small>
        </div>

        {/* Date Picker */}
        <div className="form-group">
          <label htmlFor="date">Date (past week):</label>
          <DatePicker
            id="date"
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            minDate={minDate}
            maxDate={maxDate}
            dateFormat="yyyy-MM-dd"
            placeholderText="Select a date"
            required
          />
          {selectedDate && (
            <small>Formatted date: {formatDate(selectedDate)}</small>
          )}
        </div>

        {/* Submit Button */}
        <button type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Submitting...' : 'Search Logs'}
        </button>

        {/* Status Messages */}
        {error && <div className="error-message">{error}</div>}
        {success && <div className="success-message">{success}</div>}
      </form>
    </div>
  );
};

export default LogSearchForm;



.log-search-container {
  max-width: 500px;
  margin: 0 auto;
  padding: 20px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

select, input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.error-message {
  color: #d32f2f;
  margin-top: 10px;
}

.success-message {
  color: #388e3c;
  margin-top: 10px;
}

button {
  background-color: #1976d2;
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.react-datepicker-wrapper {
  width: 100%;
}
