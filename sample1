import React, { useState } from 'react';
import axios from 'axios';
import './ServiceManager.css'; // Import the CSS file

const ServiceManager = () => {
  const [category, setCategory] = useState('');
  const [environment, setEnvironment] = useState('');
  const [action, setAction] = useState('');
  const [status, setStatus] = useState('');

  // Environment categories and sub-environments
  const environmentCategories = {
    Dev: ['dev1', 'dev2'],
    DM: ['dm1', 'dm2'],
    PERF: ['perf1', 'perf2'],
    ESQM: ['esqm1', 'esqm2'],
  };

  // Available actions
  const actions = [
    'Start Services',
    'Stop Services',
    'Check Logs',
    'Check Status',
  ];

  const handleCategoryChange = (e) => {
    setCategory(e.target.value);
    setEnvironment(''); // Reset environment when category changes
  };

  const handleEnvironmentChange = (e) => {
    setEnvironment(e.target.value);
  };

  const handleActionChange = (e) => {
    setAction(e.target.value);
  };

  const handleExecute = async () => {
    if (!category || !environment || !action) {
      alert('Please select a category, environment, and action.');
      return;
    }

    try {
      // Call Django API
      const response = await axios.post('http://localhost:8000/api/execute/', {
        category,
        environment,
        action,
      });

      // Update status based on the response
      setStatus(response.data.status || 'Action executed successfully.');
    } catch (error) {
      setStatus('Error: Failed to execute action.');
      console.error(error);
    }
  };

  return (
    <div className="service-manager">
      <h2>Service Management</h2>
      <div>
        <label>Select Category: </label>
        <select value={category} onChange={handleCategoryChange}>
          <option value="">--Select--</option>
          {Object.keys(environmentCategories).map((cat, index) => (
            <option key={index} value={cat}>{cat}</option>
          ))}
        </select>
      </div>

      {category && (
        <div>
          <label>Select Environment: </label>
          <select value={environment} onChange={handleEnvironmentChange}>
            <option value="">--Select--</option>
            {environmentCategories[category].map((env, index) => (
              <option key={index} value={env}>{env}</option>
            ))}
          </select>
        </div>
      )}

      {environment && (
        <div>
          <label>Select Action: </label>
          <select value={action} onChange={handleActionChange}>
            <option value="">--Select--</option>
            {actions.map((act, index) => (
              <option key={index} value={act}>{act}</option>
            ))}
          </select>
        </div>
      )}

      {action && (
        <div>
          <button onClick={handleExecute}>Execute</button>
        </div>
      )}

      <div>
        <h3>Status: {status}</h3>
      </div>
    </div>
  );
};

export default ServiceManager;
