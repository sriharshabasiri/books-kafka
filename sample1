import json
import time
from django.utils.deprecation import MiddlewareMixin

class RequestResponseLoggerMiddleware(MiddlewareMixin):
    def process_request(self, request):
        request.start_time = time.time()
        # Log request details
        request_info = {
            'method': request.method,
            'path': request.path,
            'query_params': dict(request.GET),
            'headers': dict(request.headers),
        }
        print(f"Request: {json.dumps(request_info, indent=2)}")
        
        # For POST/PUT bodies (except streaming requests)
        if request.method in ('POST', 'PUT', 'PATCH') and not request.META.get('HTTP_TRANSFER_ENCODING') == 'chunked':
            try:
                request_info['body'] = json.loads(request.body.decode('utf-8'))
            except (UnicodeDecodeError, json.JSONDecodeError):
                request_info['body'] = "(binary or non-JSON data)"
        
        return None

    def process_response(self, request, response):
        # Calculate response time
        response_time = time.time() - request.start_time

        # Prepare base log info
        log_data = {
            'status_code': response.status_code,
            'response_time': f"{response_time:.3f}s",
            'headers': dict(response.headers),
        }

        # Handle StreamingHttpResponse differently
        if hasattr(response, 'streaming_content'):
            print(f"Streaming Response: {json.dumps(log_data, indent=2)}")
            return response

        # For regular responses
        try:
            if hasattr(response, 'content'):
                log_data['content'] = json.loads(response.content.decode('utf-8'))
        except (UnicodeDecodeError, json.JSONDecodeError, AttributeError):
            log_data['content'] = "(binary or non-JSON data)"

        print(f"Response: {json.dumps(log_data, indent=2)}")
        return response
