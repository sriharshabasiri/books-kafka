---
- name: Validate and normalize time inputs
  hosts: localhost
  vars:
    start_time: "{{ start_time | default('') }}"
    end_time: "{{ end_time | default('') }}"
    
    # Normalized times (calculated in pre_tasks)
    normalized_start: ""
    normalized_end: ""

  pre_tasks:
    - name: Validate and normalize start_time
      ansible.builtin.set_fact:
        normalized_start: "{{ start_time | regex_replace('\\s+', ' ') | trim }}"
      when: start_time != ""

    - name: Validate time format (strict)
      ansible.builtin.assert:
        that:
          - normalized_start is match('^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$')
        fail_msg: "start_time must be in 'YYYY-MM-DD HH:MM' format (received: '{{ start_time }}')"
        success_msg: "Start time format validated"

    - name: Set default end_time (+1 hour if not provided)
      ansible.builtin.set_fact:
        normalized_end: >-
          {% if end_time and end_time != '' %}
          {{ end_time | regex_replace('\\s+', ' ') | trim }}
          {% else %}
          {{ (normalized_start | to_datetime('%Y-%m-%d %H:%M') + 3600 | strftime('%Y-%m-%d %H:%M') }}
          {% endif %}
      when: normalized_start != ""

    - name: Validate end_time format
      ansible.builtin.assert:
        that:
          - normalized_end is match('^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$')
        fail_msg: "end_time must be in 'YYYY-MM-DD HH:MM' format (received: '{{ end_time }}')"
      when: normalized_end != ""

    - name: Validate time range
      ansible.builtin.assert:
        that:
          - "(normalized_end | to_datetime('%Y-%m-%d %H:%M')) > (normalized_start | to_datetime('%Y-%m-%d %H:%M'))"
          - "(normalized_end | to_datetime('%Y-%m-%d %H:%M') - normalized_start | to_datetime('%Y-%m-%d %H:%M')).total_seconds() <= 86400"
        fail_msg: "Time range must be â‰¤24 hours and end_time > start_time"
        success_msg: "Time range validated successfully"
      when: normalized_start != "" and normalized_end != ""

  tasks:
    - name: Use normalized times in main playbook
      ansible.builtin.debug:
        msg: >
          Searching from {{ normalized_start }} to {{ normalized_end }}
          ({{ (normalized_end | to_datetime('%Y-%m-%d %H:%M') - normalized_start | to_datetime('%Y-%m-%d %H:%M')).total_seconds() / 3600 }} hours)
