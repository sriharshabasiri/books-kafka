import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ServiceManager.css';

const ServiceManager = () => {
  const [category, setCategory] = useState('');
  const [environment, setEnvironment] = useState('');
  const [action, setAction] = useState('');
  const [status, setStatus] = useState('');
  const [jobId, setJobId] = useState(null);
  const [eventLog, setEventLog] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  // Environment categories and sub-environments
  const environmentCategories = {
    Dev: ['dev1', 'dev2'],
    DM: ['dm1', 'dm2'],
    PERF: ['perf1', 'perf2'],
    ESQM: ['esqm1', 'esqm2'],
  };

  // Available actions
  const actions = [
    'Start Services',
    'Stop Services',
    'Check Logs',
    'Check Status',
  ];

  const handleCategoryChange = (e) => {
    setCategory(e.target.value);
    setEnvironment('');
    setEventLog([]);
  };

  const handleEnvironmentChange = (e) => {
    setEnvironment(e.target.value);
    setEventLog([]);
  };

  const handleActionChange = (e) => {
    setAction(e.target.value);
    setEventLog([]);
  };

  // Function to stream events from Django
  const streamEvents = (jobId) => {
    const eventSource = new EventSource(`http://localhost:8000/api/jobs/${jobId}/events/`);

    eventSource.onmessage = (e) => {
      const event = JSON.parse(e.data);
      
      if (event.status === 'complete') {
        eventSource.close();
        setIsLoading(false);
        return;
      }

      setEventLog(prev => [...prev, event]);
      setStatus(`Task ${event.counter}/${event.total_tasks}: ${event.task_name}`);
    };

    eventSource.onerror = () => {
      eventSource.close();
      setIsLoading(false);
    };

    return () => eventSource.close();
  };

  const handleExecute = async () => {
    if (!category || !environment || !action) {
      alert('Please select a category, environment, and action.');
      return;
    }

    setIsLoading(true);
    setEventLog([]);
    setStatus('Initializing job...');

    try {
      // Start the job
      const response = await axios.post('http://localhost:8000/api/execute/', {
        category,
        environment,
        action,
      });

      setJobId(response.data.job_id);
      setStatus(`Job ${response.data.job_id} started. Streaming events...`);
      
      // Start streaming events
      streamEvents(response.data.job_id);

    } catch (error) {
      setIsLoading(false);
      setStatus('Error: Failed to start job.');
      console.error(error);
    }
  };

  // Format event output for display
  const formatEventOutput = (event) => {
    if (event.stdout) return event.stdout;
    if (event.msg) return event.msg;
    return JSON.stringify(event, null, 2);
  };

  return (
    <div className="service-manager">
      <h2>Service Management</h2>
      <div>
        <label>Select Category: </label>
        <select value={category} onChange={handleCategoryChange}>
          <option value="">--Select--</option>
          {Object.keys(environmentCategories).map((cat, index) => (
            <option key={index} value={cat}>{cat}</option>
          ))}
        </select>
      </div>

      {category && (
        <div>
          <label>Select Environment: </label>
          <select value={environment} onChange={handleEnvironmentChange}>
            <option value="">--Select--</option>
            {environmentCategories[category].map((env, index) => (
              <option key={index} value={env}>{env}</option>
            ))}
          </select>
        </div>
      )}

      {environment && (
        <div>
          <label>Select Action: </label>
          <select value={action} onChange={handleActionChange}>
            <option value="">--Select--</option>
            {actions.map((act, index) => (
              <option key={index} value={act}>{act}</option>
            ))}
          </select>
        </div>
      )}

      {action && (
        <div>
          <button onClick={handleExecute} disabled={isLoading}>
            {isLoading ? 'Running...' : 'Execute'}
          </button>
        </div>
      )}

      <div className="status-container">
        <h3>Status: {status}</h3>
        {isLoading && <div className="spinner"></div>}
      </div>

      <div className="event-log">
        <h4>Execution Log:</h4>
        <pre>
          {eventLog.map((event, index) => (
            <div key={index} className={`event ${event.event_type || ''}`}>
              <strong>[{event.task_name || 'Task'}]:</strong> {formatEventOutput(event)}
            </div>
          ))}
        </pre>
      </div>
    </div>
  );
};

export default ServiceManager;



.service-manager {
  font-family: Arial, sans-serif;
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

select, button {
  padding: 8px 12px;
  margin: 5px;
  border-radius: 4px;
  border: 1px solid #ddd;
}

button {
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.status-container {
  margin: 20px 0;
  padding: 10px;
  background-color: #f5f5f5;
  border-radius: 4px;
}

.event-log {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #fafafa;
  border-radius: 4px;
}

.event {
  margin: 5px 0;
  padding: 5px;
  border-bottom: 1px solid #eee;
}

.event.runner_on_ok {
  color: green;
}

.event.runner_on_failed {
  color: red;
}

.spinner {
  border: 4px solid rgba(0, 0, 0, 0.1);
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border-left-color: #09f;
  animation: spin 1s linear infinite;
  display: inline-block;
  margin-left: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
