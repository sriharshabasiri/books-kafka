---
- name: Search logs with different date formats
  hosts: localhost
  vars:
    # Configuration
    main_log_path: "/opt/finacle/dfsapp/common/log/"
    error_log_paths:
      - "/opt/finacle/dfsapp/common/log/finint/fcrmmb"
      - "/opt/finacle/dfsapp/common/log/fsb/fsbwebservice"
    
    # Input parameters
    uuid: ""
    search_date: ""  # Format: 10Mar2025
    max_results: 5

  tasks:
    - name: Validate inputs
      ansible.builtin.assert:
        that:
          - uuid | length >= 3
          - search_date | regex_match('^[0-9]{2}[A-Za-z]{3}[0-9]{4}$')
        fail_msg: "Invalid inputs. UUID required and date format must be DDMonYYYY (e.g., 10Mar2025)"

    - name: Convert date formats for searching
      ansible.builtin.set_fact:
        # For instrumentation logs (10Mar2025 18:00)
        instr_date: "{{ search_date[:2] }}{{ search_date[2:5] }}{{ search_date[5:] }}"
        
        # For error logs (2025-03-10 18:00)
        error_date: >-
          {{ 
            search_date[5:] + '-' + 
            ({'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06',
              'Jul':'07','Aug':'08','Sep':'09','Oct':'10','Nov':'11','Dec':'12'
            }[search_date[2:5]]) + '-' + 
            search_date[:2] 
          }}

    - name: Search instrumentation logs for success
      ansible.builtin.shell: |
        grep -i "{{ uuid }}" {{ main_log_path }}instrumentation* | 
        grep -i "{{ instr_date }}" |
        awk -F, '$4 == "success"' |
        tail -n {{ max_results }} > /tmp/success_results.txt
      register: success_search
      ignore_errors: yes
      changed_when: false

    - name: Process error cases if no success found
      block:
        - name: Search instrumentation logs for failures
          ansible.builtin.shell: |
            grep -i "{{ uuid }}" {{ main_log_path }}instrumentation* | 
            grep -i "{{ instr_date }}" |
            awk -F, '$4 != "success"' |
            tail -n {{ max_results }} > /tmp/failure_results.txt
          register: failure_search
          ignore_errors: yes
          changed_when: false

        - name: Search error logs for context
          ansible.builtin.shell: |
            > /tmp/error_context.txt
            for path in {{ error_log_paths | join(' ') }}; do
              grep -A 20 -i "{{ uuid }}" $path/ciErrorLog* |
              grep -A 20 -i "{{ error_date }}" >> /tmp/error_context.txt
            done
            head -n $((20 * {{ max_results }})) /tmp/error_context.txt > /tmp/error_context_trimmed.txt
          when: failure_search.rc == 0
          changed_when: false

      when: success_search.rc != 0

    - name: Display results
      block:
        - name: Show success results
          ansible.builtin.debug:
            msg: |
              SUCCESSFUL TRANSACTIONS:
              {{ lookup('file', '/tmp/success_results.txt') | default('No successful transactions found') }}
          when: success_search.rc == 0

        - name: Show failure results
          block:
            - ansible.builtin.debug:
                msg: |
                  FAILURE LINES:
                  {{ lookup('file', '/tmp/failure_results.txt') | default('No failure lines found') }}
            - ansible.builtin.debug:
                msg: |
                  ERROR CONTEXT:
                  {{ lookup('file', '/tmp/error_context_trimmed.txt') | default('No error context found') }}
          when: success_search.rc != 0 and failure_search.rc == 0

        - name: No results found
          ansible.builtin.debug:
            msg: "No matching entries found for UUID {{ uuid }} on date {{ search_date }}"
          when: success_search.rc != 0 and failure_search.rc != 0

    - name: Cleanup temporary files
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - success_results.txt
        - failure_results.txt
        - error_context.txt
        - error_context_trimmed.txt
      ignore_errors: yes
