import React, { useState } from 'react';
import axios from 'axios';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const regionEnvironments = {
  dev: ['dev1', 'dev2'],
  esqm: ['esqm1', 'esqm2', 'esqm3'],
  perf: ['perf1', 'perf2']
};

const LogSearchForm = () => {
  const [selectedRegion, setSelectedRegion] = useState('');
  const [selectedEnvironment, setSelectedEnvironment] = useState('');
  const [uuid, setUuid] = useState('');
  const [selectedDate, setSelectedDate] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Calculate min/max dates for past week
  const maxDate = new Date();
  const minDate = new Date();
  minDate.setDate(maxDate.getDate() - 7);

  const handleRegionChange = (e) => {
    const region = e.target.value;
    setSelectedRegion(region);
    setSelectedEnvironment('');
  };

  const handleUuidChange = (e) => {
    const value = e.target.value;
    if (value.length <= 64) {
      setUuid(value);
    }
  };

  const formatDate = (date) => {
    if (!date) return '';
    const day = date.getDate().toString().padStart(2, '0');
    const month = date.toLocaleString('default', { month: 'short' });
    const year = date.getFullYear();
    return `${day}${month}${year}`;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (!selectedRegion || !selectedEnvironment || !uuid || !selectedDate) {
      setError('Please fill all fields');
      return;
    }

    if (uuid.length !== 64) {
      setError('UUID must be exactly 64 characters');
      return;
    }

    const formattedDate = formatDate(selectedDate);

    try {
      setIsSubmitting(true);
      const response = await axios.post('/api/logsearch/', {
        environment: selectedEnvironment,
        uuid: uuid,
        date: formattedDate
      });
      setSuccess('Log search initiated successfully!');
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to initiate log search');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="log-search-container">
      <h2>Log Search</h2>
      
      <form onSubmit={handleSubmit} className="inline-form">
        {/* Region Dropdown */}
        <div className="form-row">
          <label htmlFor="region">Region:</label>
          <div className="form-control">
            <select
              id="region"
              value={selectedRegion}
              onChange={handleRegionChange}
              required
            >
              <option value="">Select a region</option>
              {Object.keys(regionEnvironments).map(region => (
                <option key={region} value={region}>{region.toUpperCase()}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Environment Dropdown */}
        {selectedRegion && (
          <div className="form-row">
            <label htmlFor="environment">Environment:</label>
            <div className="form-control">
              <select
                id="environment"
                value={selectedEnvironment}
                onChange={(e) => setSelectedEnvironment(e.target.value)}
                required
              >
                <option value="">Select environment</option>
                {regionEnvironments[selectedRegion].map(env => (
                  <option key={env} value={env}>{env}</option>
                ))}
              </select>
            </div>
          </div>
        )}

        {/* UUID Input */}
        <div className="form-row">
          <label htmlFor="uuid">UUID:</label>
          <div className="form-control">
            <input
              type="text"
              id="uuid"
              value={uuid}
              onChange={handleUuidChange}
              maxLength={64}
              pattern="[a-fA-F0-9]{64}"
              title="64 character UUID"
              required
            />
            <div className="char-count">{uuid.length}/64</div>
          </div>
        </div>

        {/* Date Picker */}
        <div className="form-row">
          <label htmlFor="date">Date:</label>
          <div className="form-control">
            <DatePicker
              id="date"
              selected={selectedDate}
              onChange={(date) => setSelectedDate(date)}
              minDate={minDate}
              maxDate={maxDate}
              dateFormat="yyyy-MM-dd"
              placeholderText="Select a date"
              required
            />
            {selectedDate && (
              <div className="date-preview">{formatDate(selectedDate)}</div>
            )}
          </div>
        </div>

        {/* Submit Button */}
        <div className="form-row">
          <div className="form-control">
            <button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Submitting...' : 'Search Logs'}
            </button>
          </div>
        </div>

        {/* Status Messages */}
        {(error || success) && (
          <div className="form-row">
            <div className="form-message">
              {error && <div className="error-message">{error}</div>}
              {success && <div className="success-message">{success}</div>}
            </div>
          </div>
        )}
      </form>
    </div>
  );
};

export default LogSearchForm;



.log-search-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.inline-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.form-row {
  display: flex;
  align-items: center;
  gap: 15px;
}

.form-row label {
  min-width: 100px;
  text-align: right;
  font-weight: bold;
}

.form-control {
  flex: 1;
  display: flex;
  align-items: center;
  gap: 10px;
}

.form-control select,
.form-control input {
  flex: 1;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  min-width: 200px;
}

.form-control .react-datepicker-wrapper {
  flex: 1;
}

.char-count,
.date-preview {
  color: #666;
  font-size: 0.9em;
  min-width: 120px;
}

button {
  background-color: #1976d2;
  color: white;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error-message {
  color: #d32f2f;
  margin-top: 5px;
}

.success-message {
  color: #388e3c;
  margin-top: 5px;
}

.form-message {
  margin-left: 115px; /* Align with input fields */
}
